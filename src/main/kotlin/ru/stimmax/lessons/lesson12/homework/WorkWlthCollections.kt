package ru.stimmax.ru.stimmax.lessons.lesson12.homework

import java.util.Locale
import java.util.Locale.getDefault

fun main() {

// Задачи на приведение коллекции к значению

    val a1 = mutableListOf<Int>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
// 1 . Проверить, что размер коллекции больше 5 элементов.
    println(a1.size)

// 2 . Проверить, что коллекция пустая
    println(a1.isEmpty())

// 3 . Проверить, что коллекция не пустая
    println(a1.isNotEmpty())

// 4 . Взять элемент по индексу или создать значение если индекса не существует
    println(a1[5])
    a1.add(10, 11)

// 5 . Собрать коллекцию в строку
    println(a1.joinToString())

// 6 . Посчитать сумму всех значений
    println(a1.sum())

// 7 . Посчитать среднее
    println(a1.average())

// 8 . Взять максимальное число
    println(a1.max())

// 9 . Взять минимальное число
    println(a1.min())

// 10 . Взять первое число или null
    println(a1.minOrNull())

// 11 . Проверить что коллекция содержит элемент
    println(a1.contains(5))


//Реши задачи подходящим методом для работы с коллекцией. Для каждой задачи есть свой метод, не повторяйся. Список методов
// в рекомендациях под заданиями.

// Задачи на обработку коллекций

// 12 . Отфильтровать коллекцию по диапазону 18-30
    println(a1.filter { it in 18..30 })

// 13 . Выбрать числа, которые не делятся на 2 и 3 одновременно
    println(a1.filter { it % 2 != 0 && it % 3 != 0 })

// 14 . Очистить текстовую коллекцию от null элементов
    val nullCollection = mutableListOf<Int?>(1, 2, 3, 4, 5, null, 7, 8, 9, null)
    println(nullCollection.filterNotNull())

// 15 . Преобразовать текстовую коллекцию в коллекцию длин слов
    val textCollection = mutableListOf<String>("hello", "word", "cat", "dog", "dog")
    println(textCollection.map { it.length })

// 16 . Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    println(textCollection.associate { it.reversed() to it.length })


// 17 . Отсортировать список в алфавитном порядке
    println(textCollection.sorted())

// 18 . Взять первые 3 элемента списка
    println(textCollection.take(3))

// 19 . Распечатать квадраты элементов списка
    println(textCollection.forEach {
        it.length * it.length
    })

// 20 . Группировать список по первой букве слов
    println(textCollection.groupBy { it[0] })

// 21 . Очистить список от дублей
    println(textCollection.distinct())

// 22 . Отсортировать список по убыванию
    println(textCollection.sortedDescending())

// 23 . Взять последние 3 элемента списка
    println(textCollection.takeLast(3))


// Реши задачи ниже в отдельных функциях.
//Если коллекция пустая - “Пусто”
    val empty = listOf<Int>()
    println(digitToCollectionToString(empty))
//Если количество элементов меньше пяти - “Короткая”
    val short = listOf<Int>(1,2,3)
    println(digitToCollectionToString(short))
//Если коллекция начинается с 0 - “Стартовая”
    val startZero = listOf(0,1,2,3,4,5,6,6,7,8,9)
    println(digitToCollectionToString(startZero))
//Если сумма всех чисел больше 10000 - “Массивная”
    val big = listOf(100000, 122222, 233333, 455555, 456456456)
    println(digitToCollectionToString(big))
//Если среднее значение равно 10 - “Сбалансированная”
    val average = listOf(10,10,10,10,10,10,10,10,10,10)
    println(digitToCollectionToString(average))
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
    val toString = listOf(1,2,3,4,5,6,7,8,9,10,11,12,13,14,1)
    println(digitToCollectionToString(toString))
//Если максимальное число меньше -10 - “Отрицательная”
    val minimum = listOf(-10, -10, -10, -10, -10)
    println(digitToCollectionToString(minimum))
//Если минимальное число больше 1000 - “Положительная”
    val threeAndFour = listOf(1001, 1002, 1003, 1000, 1005, 1004)
    println(digitToCollectionToString(threeAndFour))
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
    val unic = listOf(1,2,3,4,6,6,7,8,9,10,11,12,13,14,15)
    println(digitToCollectionToString(unic))
//Иначе - “Уникальная”
    val other = listOf(1,2,3,4,6,6,7,8,9,10,11,12,13,15)
    println(digitToCollectionToString(other))


val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
println(filterGoodEstimate(grades))

val list = listOf( "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
    "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор",
    "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
    "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
    "посуда", "Настольная лампа", "торшер", "Этажерка" )

    println(wordToLowerCase(list))


    val list1 = listOf( "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
        "столик", "Вазон")
    println(wordsToDigitWord(list1))

    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(unicDigits(numbers))

    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    val minInt = 180
    println(age(ages, minInt))

}

//Задача 24. Характеристика числовой коллекции
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when

//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток
fun digitToCollectionToString (listDigit: List<Int>) : List<String> {
    val result = mutableListOf<String>()
        when {
            listDigit.isEmpty() -> result.add("Пусто")
            listDigit.size < 5 -> result.add("Короткая")
            listDigit[0] == 0 -> result.add("Стартовая")
            listDigit.sum() > 10000 -> result.add("Массивная")
            listDigit.average().toInt() == 10 -> result.add("Сбалансированная")
            listDigit.joinToString("").length == 20 -> result.add("Клейкая")
            listDigit.max() <= -10 -> result.add("Отрицательная")
            listDigit.min() >= 1000 -> result.add("Положительная")
            listDigit.contains(3) && listDigit.contains(14) -> result.add("Пи***тая")
            else -> result.add("Уникальная")
        }
    return result

}


//Задача 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3. Вызывай
//методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
fun filterGoodEstimate(grades: List<Int>): List<Int> {
     val goodEstimate = grades.filter { it >= 60}
     val otherEstimate = grades.filter {it < 60}
             .sorted()
            .take(3)
    return goodEstimate + otherEstimate
}


//Задача 26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//Начальные значения: val list = listOf( "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра",
// "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка",
// "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос",
// "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир",
// "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка" )
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
fun wordToLowerCase(list: List<String>): Map<Char, List<String>> {
    val result = list.map { it.lowercase() }
        .groupBy { it[0] }
        .toMap()
    return result
}



//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя знаками
// после запятой, используя функцию format и подходящий шаблон.

fun wordsToDigitWord(list: List<String>): String {
    val result = list.map {it.length}
        .average()
        .toString()
    return (result.format("Cредняя длина слов ${result}"))
}

//Задание 28: Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun unicDigits(list: List<Int>): Map<String, List<Int>> {
    val result = list.distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "Четные" else "Нечетные"}
    return result
}

//Задание 29: Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его,
// либо null если значения не нашлось.
fun age(ages: List<Int?>, minInt: Int): Int? {
    val result = ages
        .filterNotNull()
        .firstOrNull {
        it > minInt
    }
    return result
}